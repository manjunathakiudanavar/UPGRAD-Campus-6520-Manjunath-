1. Question: How do you initialize a new Git repository locally?

Solution:
To initialize a new Git repository locally, navigate to your project directory in the terminal and run the following command:

bash
Copy code
git init
This will create a new subdirectory named .git in your project directory, which contains all the necessary metadata for the repository.

2. Question: How can you add changes from your working directory to the staging area in Git?

Solution:
To add changes from your working directory to the staging area, you can use the git add command followed by the filenames or directories you want to stage. For example:

bash
Copy code
git add filename.txt  # To stage a specific file
or

bash
Copy code
git add .  # To stage all changes in the current directory and its subdirectories
3. Question: What is the difference between git pull and git fetch?

Solution:

git pull: This command fetches changes from a remote repository and merges them into your current branch. Essentially, it performs both git fetch and git merge in one step. If you have local changes that conflict with the changes fetched from the remote, you'll need to resolve these conflicts.
git fetch: This command only downloads the changes from a remote repository to your local repository. It doesn't merge these changes into your current branch. After fetching, you can decide whether to merge these changes manually using git merge or rebase using git rebase.
4. Question: How can you undo the last commit in Git without losing the changes in your working directory?

Solution:
If you want to undo the last commit but keep the changes in your working directory, you can use the following command:

bash
Copy code
git reset HEAD~1
git reset: This command moves the HEAD pointer (and the current branch pointer) back to the previous commit (HEAD~1 refers to the commit before the current HEAD).
The changes from the last commit will now be in the staging area (index), and your working directory will still have those changes. You can then modify, stage, or commit these changes as needed.
These are just a few examples, and Git is a powerful tool with many features. If you have more specific questions or need further explanations on any topic related to Git, please feel free to ask!







